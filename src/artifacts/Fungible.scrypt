import "../node_modules/scrypt-ts-lib/artifacts/ec/misc.scrypt";import "../node_modules/scrypt-ts-lib/artifacts/ec/secp256k1.scrypt";
struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract Fungible {
  const bytes tokenType;
  const PubKey oraclePKEC;
  const int totalSupply;
  @state Ripemd160 alice;
  @state int thisSupply;
  @state bytes genesisTX;
  bytes __scrypt_ts_ctx_hashprevouts;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_value;
  __scrypt_ts_Change __scrypt_ts_change;
  bytes __scrypt_ts_prevouts;
  constructor(Ripemd160 alice, int totalSupply, PubKey oraclePKEC) {
    this.totalSupply = totalSupply;
    this.thisSupply = this.totalSupply;
    this.alice = alice;
    this.genesisTX = b'';
    this.tokenType = b'47656e6572616c20507572706f736520546f6b656e204543445341204f7261636c65';
    this.oraclePKEC = oraclePKEC;
  }
  public function meltUnits(Sig sig, PubKey pubkey, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashprevouts = SigHash.hashPrevouts(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(hash160(pubkey) == this.alice);
    require(checkSig(sig, pubkey));
    bytes outputs = b'';
    outputs = Utils.buildOutput(Utils.buildPublicKeyHashScript(this.alice), this.__scrypt_ts_ctx_value);
    if(this.__scrypt_ts_change.amount > 0) {
        outputs += this.buildChangeOutput();
      }
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  public function splitUnits(bytes sigOracle, PubKey pbkP2, Sig sig, PubKey pubkey, int numberOfSendTokens, Ripemd160 toNewOwner, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress, bytes __scrypt_ts_prevouts) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashprevouts = SigHash.hashPrevouts(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(hash256(__scrypt_ts_prevouts) == this.__scrypt_ts_ctx_hashprevouts);
    this.__scrypt_ts_prevouts = __scrypt_ts_prevouts;
    Point p1 = SECP256K1.pubKey2Point(this.oraclePKEC);
    Point p2 = SECP256K1.pubKey2Point(pbkP2);
    PubKey pbkOracle = SECP256K1.point2PubKey(SECP256K1.addPoints(p1, p2));
    require(checkSig(Sig(sigOracle), pbkOracle));
    require((numberOfSendTokens > 0) && (numberOfSendTokens <= this.thisSupply));
    require(hash160(pubkey) == this.alice);
    require(checkSig(sig, pubkey));
    if(this.genesisTX == b'') {
        this.genesisTX = reverseBytes(this.__scrypt_ts_prevouts[0 : 32], 32) + this.tokenType;
        
      }
    bytes outputs1 = b'';
    bytes outputs = b'';
    if(this.thisSupply == numberOfSendTokens) {
        this.alice = toNewOwner;
        outputs = this.buildStateOutput(this.__scrypt_ts_ctx_value);
        outputs += Utils.buildOutput(Utils.buildPublicKeyHashScript(this.alice), 1);
      } else {
        this.thisSupply = this.thisSupply - numberOfSendTokens;
        outputs1 = this.buildStateOutput(this.__scrypt_ts_ctx_value);
        this.alice = toNewOwner;
        this.thisSupply = numberOfSendTokens;
        outputs = this.buildStateOutput(this.__scrypt_ts_ctx_value) + outputs1;
        outputs += Utils.buildOutput(Utils.buildPublicKeyHashScript(this.alice), 1);
        
      }
    if(this.__scrypt_ts_change.amount > 0) {
        outputs += this.buildChangeOutput();
        
      }
    
    
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  public function mergeUnits(bytes sigOracle, PubKey pbkP2, Sig sig, PubKey pubkey, int Supply1, int Supply2, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashprevouts = SigHash.hashPrevouts(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    Point p1 = SECP256K1.pubKey2Point(this.oraclePKEC);
    Point p2 = SECP256K1.pubKey2Point(pbkP2);
    PubKey pbkOracle = SECP256K1.point2PubKey(SECP256K1.addPoints(p1, p2));
    
    
    require(checkSig(Sig(sigOracle), pbkOracle));
    require(hash160(pubkey) == this.alice);
    require(checkSig(sig, pubkey));
    bytes outputs = b'';
    this.thisSupply = Supply1 + Supply2;
    outputs = this.buildStateOutput(this.__scrypt_ts_ctx_value);
    outputs += Utils.buildOutput(Utils.buildPublicKeyHashScript(this.alice), this.__scrypt_ts_ctx_value);
    if(this.__scrypt_ts_change.amount > 0) {
        outputs += this.buildChangeOutput();
      }
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}